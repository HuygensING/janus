Janus
=====

Janus stores documents and annotations on them.

Compile and run::

    mvn clean package
    ./target/appassembler/bin/janus server janus.yml

or use the Dockerfile, ``docker run -p 8080:8080 $(docker build -q .)``.


Usage with an Elasticsearch backend
-----------------------------------

Start Elasticsearch with the appropriate settings::

    cd elasticsearch-setup
    docker run -p 9200:9200 -p 9300:9300 $(docker build -q .)

Add the annotations index::

    sh put_index.sh

You can now upload an XML file to have it indexed as a document with one
annotation per tag::

    curl -X PUT -H "Content-Type: application/xml"  \
        http://localhost:8080/documents/some_id -d @example.xml
    curl http://localhost:8080/documents/some_id

Add an annotation::

    curl -H 'Content-Type: application/json' -X POST \
        http://localhost:8080/documents/some_id/annotations -d '{
            "target": "some_id", "start": 4, "end": 10,
            "tag": "note", "type": "user"
        }'

This reports the (autogenerated) id of the annotation.


Conceptual overview
-------------------

Janus stores documents, which are strings of (Unicode) text, and annotations.
Each document and each annotation has an identifier, which uniquely addresses
it within a running Janus instance.

The documents go into an Elasticsearch index to allow full-text search.

Annotations are spans of text with some metadata. They can be thought of as
a span (``start``, ``end``) within a document, called the ``target``. The
target is denoted in the API by its identifier. In addition, an annotation
has a ``type`` and a ``tag``; the ``tag`` can be thought of as a subtype and
it is mostly used to store XML tags. It also has attributes (``attrib``), a
key-value (string-string) dictionary that corresponds to the attributes on
XML tags.

Finally, an annotation may have a ``body``, which is (the identifier of) a
different document. An annotation without a body can be thought of as a
highlighted portion of text. The annotation

::

    {"begin": 0, "end": 4, "target": "draft-paper", "type": "user",
     "tag": "green"}

might indicate that the user used a green highlighter on the first four
characters (Unicode codepoints) of the document ``draft-paper``. By contrast,

::

    {"begin": 4, "end": 10, "target": "draft-paper", "type": "user",
     "tag": "yellow", "body": "note-1"}

would indicate that the user put a yellow sticky note on ``draft-paper``,
to annotate the next six characters. The sticky note is itself a document,
its contents being the document ``note-1``.


REST API
--------

Janus communicates to the outside world using a web API.
For documentation, fire up Janus and visit http://localhost:8080/swagger/.


Special support for XML
~~~~~~~~~~~~~~~~~~~~~~~

Janus has special support for XML documents, which are parsed and turned into
a flat text document and one annotation per XML element by the ``putxml``
endpoint.

The text document corresponds to the text in between the tags; in XPath
terminology, it's the ``string()`` of the whole document. Each element is
turned into an annotation with the following properties:

* The ``type`` of the annotation is ``"tag"``.
* The ``tag`` is its XML tag name.
* The ``target`` is the document's id.
* The ``start`` and ``end`` denote where the start and end tags where found
  in the text document.
* The attributes of the tag are stored in the ``"attrib"`` field, as strings.
* The ``body`` is empty (null).


Example: bulk indexing
~~~~~~~~~~~~~~~~~~~~~~
To upload XML files in bulk for indexing, use something like::

    find some_dir -name '*.xml' -print0 |
        xargs -0 -n 1 -P $(nproc) sh -c '
            curl -s -XPOST http://localhost:8080/documents/putxml/$(uuidgen) \
                -d @$0
            echo " " $0
        '

This indexes all XML files below ``some_dir``, assigning to each a UUID.
It prints to stdout a list of UUID/path pairs.
